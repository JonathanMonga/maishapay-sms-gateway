apply plugin: 'com.android.application'

def globalConfiguration = rootProject.extensions.getByName("ext")

android {
    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    signingConfigs {
        config {
            keyAlias 'Maishapay SMSSync'
            keyPassword 'Maishapay'
            storeFile file('C:/Users/Administrateur/Documents/Android projects/MaishapaySmsSync/keystore/keystore.jks')
            storePassword 'maishapay'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            // Library specific proguard files
            proguardFile 'proguard-gson.pro'
            proguardFile 'proguard-square-okio.pro'
            proguardFile 'proguard-square-okhttp.pro'
            proguardFile 'proguard-square-otto.pro'
            proguardFile 'proguard-google-analytics.pro'

            // Default proguard files
            proguardFile 'proguard-project.pro'
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.config
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"
            debuggable true
            signingConfig signingConfigs.config
        }

        buildTypes.each {
            it.buildConfigField 'String', 'END_POINT', END_POINT
            it.buildConfigField 'String', 'TEST_END_POINT', TEST_END_POINT
            it.buildConfigField 'String', 'CONTENT_TYPE_PARAM', CONTENT_TYPE_PARAM
            it.buildConfigField 'String', 'METHOD_PARAM', METHOD_PARAM
            it.buildConfigField 'String', 'ENTITY_PARAM', ENTITY_PARAM
            it.buildConfigField 'String', 'SEND_REQUEST_PARAM', SEND_REQUEST_PARAM
            it.buildConfigField 'String', 'SOLDE_REQUEST_PARAM', SOLDE_REQUEST_PARAM
            it.buildConfigField 'String', 'SOLDE_EPARGNE_PERSONNEL_REQUEST_PARAM', SOLDE_EPARGNE_PERSONNEL_REQUEST_PARAM
            it.buildConfigField 'String', 'FORMAT_PARAM', FORMAT_PARAM
            it.buildConfigField 'String', 'FROM_PARAM', FROM_PARAM
            it.buildConfigField 'String', 'TELEPHONE_PARAM', TELEPHONE_PARAM
            it.buildConfigField 'String', 'TRANSACTION_ID_PARAM', TRANSACTION_ID_PARAM
            it.buildConfigField 'String', 'MONTANT_PARAM', MONTANT_PARAM
            it.buildConfigField 'String', 'MONNAIE_PARAM', MONNAIE_PARAM
            it.buildConfigField 'String', 'SENT_TIMESTAMP_PARAM', SENT_TIMESTAMP_PARAM
            it.buildConfigField 'String', 'SENT_TO_PARAM', SENT_TO_PARAM
            it.buildConfigField 'String', 'OPERATOR_NAME_PARAM', OPERATOR_NAME_PARAM
            it.buildConfigField 'String', 'RETRAIT_REQUEST_PARAM', RETRAIT_REQUEST_PARAM
            it.buildConfigField 'String', 'CONFIRM_RETRAIT_REQUEST_PARAM', CONFIRM_RETRAIT_REQUEST_PARAM
            it.buildConfigField 'String', 'MOBILE_MONEY_REQUEST_PARAM', MOBILE_MONEY_REQUEST_PARAM
            it.buildConfigField 'String', 'EXPEDITAIRE_PARAM', EXPEDITAIRE_PARAM
            it.buildConfigField 'String', 'DESTINATAIRE_PARAM', DESTINATAIRE_PARAM
            it.buildConfigField 'String', 'PIN_PARAM', PIN_PARAM
            it.buildConfigField 'String', 'TOKEN_PARAM', TOKEN_PARAM
        }
    }
    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName = project.version.toString()
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
        testApplicationId "com.maishapay.smssync.tests"
        applicationId "com.maishapay.smssync"
        vectorDrawables.useSupportLibrary = true
    }
    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

//tasks.release.dependsOn(['publishApkWithAnalyticsRelease'])

// Build and launch app from command line
task runApp(type: Exec, dependsOn: ['build', 'installWithAnalyticsDebug']) {
    //Linux command to launch the MainActivity when debug app is installed
    commandLine 'adb', 'shell', 'am', 'start', '-n',
            'com.maishapay.smssync.debug/com.maishapay.smssync.presentation.view.ui.activity.MainActivity'
}

dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
    def appDependencies = rootProject.ext.appDependencies
    def appTestDependencies = rootProject.ext.appTestDependencies
    annotationProcessor appDependencies.daggerCompiler
    // Needed for source code generation
    annotationProcessor appDependencies.butterKnifeComplier
    implementation appDependencies.raiburari
    implementation appDependencies.cupboard
    implementation appDependencies.butterKnife
    implementation appDependencies.wakeful
    implementation appDependencies.okHttp
    implementation appDependencies.twitter4jCore
    implementation appDependencies.nineOldAndroids
    implementation appDependencies.loggingInterceptor
    implementation appDependencies.bottomSheet
    implementation appDependencies.zXingQRCode
    implementation appDependencies.supportPreference
    implementation appDependencies.timber
    // Firebase(analytics, crash report)
    //compile appDependencies.firebaseCore
    //compile appDependencies.firebaseCrash
    compileOnly appDependencies.javaxAnnotation
    // Needed to resolve compilation errors
    // Test depedencies
    testImplementation appTestDependencies.junit
    testImplementation appTestDependencies.mockito
    testImplementation appTestDependencies.mockWebServer
    testAnnotationProcessor appDependencies.daggerCompiler
    androidTestImplementation appTestDependencies.mockito
    androidTestImplementation appTestDependencies.dexmaker
    androidTestImplementation appTestDependencies.dexmakerMockito
    androidTestAnnotationProcessor appDependencies.daggerCompiler
}

// MUST BE AT THE BOTTOM
//apply plugin: 'com.google.gms.google-services'
